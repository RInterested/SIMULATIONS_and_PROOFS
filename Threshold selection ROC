set.seed(561)

cost0 = 1   # Cost of mis-classifying a normal as having cancer in million $
cost1 = 5   # Cost of mis-classifying a cancer patient as normal (death?)

n = 7000    # Total cases
pi0 =.8     # Percentage of normal
pi1 =.2     # Percentage of sick

# Actual values of the test for normals and sick (sick higher test values)
testA_Normals = rnorm(n*pi0, mean=3, sd=1)
testA_Sick = rnorm(n*pi1, 6, 1)

hist(testA_Normals,border=F, xlim=c(0,10))
hist(testA_Sick,col=2,border=F, add=T)

# Determining a threshold based on cost (formula in progress)"
(Threshold = quantile(testA_Sick)[1] + 0.5 * cost0/cost1 * quantile(testA_Sick)[1])

abline(v=Threshold)

# Determining the expected loss based on knowing data generated by Gaussian:
(Loss = cost0 * (1 - pnorm(Threshold,3,1)) * pi0 + cost1 * pnorm(Threshold,6,1) * pi1)

# Data frame with all cases and outcomes:
data = data.frame(outcome=as.factor(c(rep(0,n*pi0),rep(1,n*pi1))),
                  testA=c(testA_Normals,testA_Sick))

# Generating ROC curves:
library(pROC)                  
pred <- prediction(data$testA, data$outcome)
perf <- performance(pred, "tpr", "fpr")
# performance metrics TPR: True Positive Ratio FPR: False Positive Ratio
plot(perf, col = "blue4", lwd=3)
abline(0, 1, col = "grey")
auc <- performance(pred, "auc")
legend("bottomright", 
       c(paste("AUC=",round(as.numeric(auc@y.values), digits = 2)),
         paste("Loss=",round(Loss,2))), col = c("blue4"), pch = c(3),
       ) 

# Alternative ROC with "optimal" score:
rock = ROC(form = outcome ~ testA, data=data, plot = "ROC", MX = T)

# Histogram of score values:
hist(rock$res$lr.eta)

# ROC selected "optimal" value to minimize sum sensitivity and specificity:
(machineT = as.numeric(names(which.max(rowSums(rock$res[, c("sens", "spec")])))))

# Actual values:
rock$res[which.max(rowSums(rock$res[, c("sens", "spec")])),]

# Parallel generation of the logistic regression:
logireg = glm(outcome~testA, data, family="binomial")
logireg$coefficients

# Same as the coefficients in the ROC analysis:
rock$lr$coefficients

# Score corresponding to the chosen Threshold:
(score.Thresh <- exp(logireg$coefficients[1]+
      Threshold*logireg$coefficients[2])/(1+
                          exp(logireg$coefficients[1]+
                              Threshold*logireg$coefficients[2])))

# Determining which score is closest to the chosen (Threshold):
rock$diff <- abs(rock$res$lr.eta - score.Thresh)
(Tval = rock$res[which.min(rock$diff),]$lr.eta)

#...which can be done exactly with predict():
nd = data.frame(testA = Threshold)
(Tval=predict.glm(logireg, newdata = nd, type='response'))

# The approximate cutoff value determined manually:
(log(1/Tval - 1) - logireg$coefficients[1])/logireg$coefficients[2]

# The cutoff value determined by ROC curve:
(log(1/machineT - 1) - logireg$coefficients[1])/logireg$coefficients[2]
